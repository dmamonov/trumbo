"""Signup serializers"""

# Rest framework
from rest_framework import serializers

# Models
from api.users.models import User
from api.users.enums import SetUpStatus
from api.authentication.enums import ExternalTokenChannel, ExternalTokenType
from api.authentication.models import ExternalToken

from api.utils.serializers import ChoiceField


class SignUpRequestCodeSerializer(serializers.Serializer):
    """
    Sign up form serializer
    """

    email = serializers.CharField(required=True, write_only=True)
    password = serializers.CharField(required=True, write_only=True)
    channel = ChoiceField(choices=ExternalTokenChannel.choices)

    status = serializers.CharField(read_only=True)
    resend = serializers.BooleanField(read_only=True)

    def validate(self, attrs):
        """ Validate sign up form"""
        attrs = super().validate(attrs)
        email = attrs['email']

        user_queryset = User.objects.filter(email=email)
        if user_queryset:
            user = user_queryset.first()
            if user.setup_status != SetUpStatus.SIGN_UP_VALIDATION:
                raise serializers.ValidationError(
                    {"detail": "user already exists."})

            attrs['user_id'] = user.id
            attrs['resend'] = True
        else:
            attrs['user_id'] = None
            attrs['resend'] = False
        return attrs


class SignUpValidateCodeSerializer(serializers.Serializer):
    """
    Sign up validate code serializer
    """
    email = serializers.CharField(required=True, write_only=True)
    token = serializers.CharField(required=True, write_only=True)

    # TODO: key from settings
    ACCESS = serializers.CharField(read_only=True)
    REFRESH = serializers.CharField(read_only=True)

    def validate(self, attrs):
        """ Validate sign up form"""
        attrs = super().validate(attrs)
        email = attrs['email']
        token = attrs.pop('token')

        user_queryset = User.objects.filter(
            email=email, setup_status=SetUpStatus.SIGN_UP_VALIDATION)
        if not user_queryset:
            raise serializers.ValidationError(
                {"detail": "user is invalid"})

        user = user_queryset.first()
        if user.setup_status != SetUpStatus.SIGN_UP_VALIDATION:
            raise serializers.ValidationError(
                {"detail": "user already exists."})

        attrs['user'] = user

        token_queryset = ExternalToken.get_valid_tokens(
            field=dict(user__email=email), token_type=ExternalTokenType.VALIDATE_ACCOUNT)
        if not token_queryset:
            raise serializers.ValidationError(
                {"token": "Token is invalid or has expired"})

        expected_token = token_queryset.first()
        if expected_token.is_expired:
            raise serializers.ValidationError(
                {"token": "Token is invalid or has expired"})

        if expected_token.token != token:
            raise serializers.ValidationError(
                {"token": "Token is invalid or has expired"})

        return attrs


class ForgotPasswordRequestCodeSerializer(serializers.Serializer):
    """
    Forgot Password form serializer
    """

    email = serializers.CharField(required=True, write_only=True)
    channel = ChoiceField(choices=ExternalTokenChannel.choices,
                          default=ExternalTokenChannel.EMAIL)

    status = serializers.CharField(read_only=True)
    resend = serializers.BooleanField(read_only=True)

    def validate(self, attrs):
        """ Validate sign up form"""
        attrs = super().validate(attrs)
        email = attrs['email']

        if "@auto_generated.email" in email:
            raise serializers.ValidationError(
                "This email is autogenerated, update your email and try again")

        user_queryset = User.objects.filter(email=email)
        if user_queryset:
            user = user_queryset.first()

            attrs['user_id'] = user.id
            attrs['resend'] = True
        else:
            attrs['user_id'] = None
            attrs['resend'] = False
        return attrs


class ForgotPasswordValidateCodeSerializer(serializers.Serializer):
    """
    Forgot Password validate code serializer
    """

    email = serializers.CharField(required=True, write_only=True)
    token = serializers.CharField(required=True, write_only=True)

    # TODO: key from settings
    ACCESS = serializers.CharField(read_only=True)
    REFRESH = serializers.CharField(read_only=True)

    def validate(self, attrs):
        """ Validate Forgot Password form"""
        attrs = super().validate(attrs)
        email = attrs['email']
        token = attrs.pop('token')

        user_queryset = User.objects.filter(email=email)
        if not user_queryset:
            raise serializers.ValidationError({"email": "user is invalid"})

        user = user_queryset.first()
        attrs['user'] = user

        token_queryset = ExternalToken.get_valid_tokens(
            field=dict(user__email=email), token_type=ExternalTokenType.RECOVER_ACCOUNT)
        if not token_queryset:
            raise serializers.ValidationError(
                {"token": "Token is invalid or has expired"})

        expected_token = token_queryset.first()
        if expected_token.is_expired:
            raise serializers.ValidationError(
                {"token": "Token is invalid or has expired"})

        if expected_token.token != token:
            raise serializers.ValidationError(
                {"token": "Token is invalid or has expired"})

        return attrs
